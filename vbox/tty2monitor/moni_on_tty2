#!/bin/bash

# ATLAS monitoring script to be run by user montty2 at console ALT-F2 of VirtualBox VMs


function get__n_events__n_workers {
    local ppid="${1}"
    local logfile="${2}"
    
    # wait until "pattrn" appears in logfile
    # run as background job that dies when it's parent "pid ${1}" exits
    pattrn="^.*maxEvents =[^0-9]*"
    logline="$(grep -E -m 1 -s "${pattrn}" <(tail -F -n +1 --pid ${ppid} ${logfile} 2>/dev/null) 2>/dev/null)"
    
    # a simple method to return a parameter back to the calling program
    n_events="$(sed -e "0,/${pattrn}/ s/${pattrn}\([0-9]\+\).*/\1/p" -n <<< "${logline}")"
    echo "n_events=\"${n_events}\"" >>${para_file}


    # it's a multicore if ATHENA_PROC_NUMBER is in the log before maxEvents
    pattrn="^.*ATHENA_PROC_NUMBER set to[^0-9]*"
    n_workers="$(sed -e "0,/${pattrn}/ s/${pattrn}\([0-9]\+\).*/\1/p" -n ${logfile})"
    # it's a singlecore if ATHENA_PROC_NUMBER is missing
    [[ ! "${n_workers}" ]] && n_workers="1"
    
    echo "n_workers=\"${n_workers}\"" >>${para_file}

    for (( i=0; i<n_workers; ++i ))
    do
        echo "w_msg_arr[${i}]=\"N/A\"" >>${para_file}
    done
 
    # ensure all values from this function are available before they are used
    echo "race_trigger_n_ew=\"1\"" >>${para_file}
}


function get_worker_status {
    local ppid="${1}"
    local logfile="${2}"
    local worker_index="${3}"
    
    # wait until "pattrn" appears in logfile
    # run as background job that dies when it's parent "pid ${1}" exits
    pattrn="^.*AthenaEventLoopMgr.*INFO.*start processing event"
    grep -E -m 1 -s "${pattrn}" <(tail -F -n +1 --pid ${ppid} ${logfile} 2>/dev/null) >/dev/null 2>&1

    # a simple method to return a parameter back to the calling program
    echo "w_msg_arr[${worker_index}]=\"Event nr. 1 processing\"" >>${para_file}
}


function format_timestring {
    time_s="${1}"
    
    time_d="$(( time_s / 86400 ))"
    time_s="$(( time_s - time_d * 86400 ))"
    
    time_h="$(( time_s / 3600 ))"
    time_s="$(( time_s - time_h * 3600 ))"
    
    time_m="$(( time_s / 60 ))"

    
    if (( time_d != 0 ))
    then
        time_string="$(printf "%5s d %2s h %2s min" "${time_d}" "${time_h}" "${time_m}")"
    else

        if (( time_h != 0 ))
        then
            time_string="$(printf "        %2s h %2s min" "${time_h}" "${time_m}")"
        else
            time_string="$(printf "             %2s min" "${time_m}")"
        fi
    
    fi

    echo "${time_string}"
}


function update_display_on_tty {
    # formatted output starts here
    # screen is already blank
    # don't blank it again to avoid flickering
    # instead start at upper left corner \033[0;0H
    # bold (sure this works on all terminals?): \033[1m
    # reset attributes: \033[0m
    # clear until end of line: \033[K
    # clear until end of page: \033[J
    # version string is hardcoded to ensure it is centered
    
    printf "\033[0;0H"
    printf "***************************************************\033[K\n"
    printf "*         \033[1mATLAS Event Progress Monitoring\033[0m         *\033[K\n"
    printf "*                     v4.0.0                      *\033[K\n"

    if [[ "${1}" == "starting" ]]
    then
        printf "*                    Starting                     *\033[K\n"
        printf "***************************************************\033[K\n"
    else
        printf "*     last display update (VM time): %8s     *\033[K\n" "$(date "+%T")"
        printf "***************************************************\033[K\n"
        printf "Number of events\033[K\n"
        printf "   total            :                       %7s\033[K\n" "${n_events}"
        printf "   already finished :                       %7s\033[K\n" "${n_finished_events}"
        printf "Event runtimes\033[K\n"
        printf "   arithmetic mean  :                       %7s\033[K\n" "${rntme_arth_mean}"
        printf "   min / max        :             %17s\033[K\n" "${rntme_min_max}"
        printf "Estimated time left\033[K\n"
        printf "   total            :  %8s %19s\033[K\n" "${msg_overtime}" "${time_left}"
        printf "   uncertainty      :           %19s\033[K\n" "${time_left_uncert}"
        printf "%s\033[K\n" "---------------------------------------------------"

        if [[ "${race_trigger_n_ew}" ]]
        then
            printf "Status of last event per worker thread:\033[K\n"

            for (( i=1; i<=n_workers; i++ ))
            do
                printf "worker %${#n_workers}s: %s\033[K\n" "${i}" "${w_msg_arr[$(( i - 1 ))]}"
            done
        
        fi
    
        if (( n_events_left == 0 ))
        then
            printf "%s\033[K\n" "---------------------------------------------------"
            printf "Calculation completed. Preparing HITS file ...\033[K\n"
        fi
        
    fi
    
    # clear until end of page
    printf "\033[J"

    # avoids a blinking cursor
    tput civis
}


#######################
# start of main section
#######################

# basic terminal control to keep it alive
setterm -reset 2>/dev/null
setterm -powersave off 2>/dev/null
setterm -blank 0 2>/dev/null

# start with a blank screen
printf "\033c"

# avoids a blinking cursor
tput civis


# initialize global parameters
# requires complete path here. Doesn't work with "~"
para_file="/home/montty2/parameters.txt"
rm -f ${para_file}
touch ${para_file}

base_logpath="/home/montty2/RunAtlas"
main_log="${base_logpath}/log.EVNTtoHITS"
logname_1core="${main_log}"

# this must later be prefixed with a path like "${base_logpath}/worker_x/"
logname_mcore="AthenaMP.log"

n_workers="N/A"
n_events="N/A"
n_finished_events="N/A"
rntme_arth_mean="N/A"
rntme_min_max="N/A"
time_left="N/A"
time_left_uncert="N/A"
n_events_left="-1"
init_loop_counter="0"
n_finished_events_last="0"
w_status_started="0"


# subfunction running asynchronously
get__n_events__n_workers ${$} ${main_log} &


# main loop starts here
while :
do
    # why? See end of the while loop
    next_loopstart="$(( $(date +%s) + 60 ))"
    
    # source parameters that were set by subfunctions
    . ${para_file}
    
    if [[ "${race_trigger_n_ew}" ]]  &&
       ( (( n_workers == 1 )) ||
         (( n_workers == $(wc -l < <(find -L ${base_logpath} -name "${logname_mcore}")) )) )
    then

        if (( w_status_started == 0 ))
        then
            # sometimes it takes very long to finish the 1st event
            # to calm down impatient volunteers get an intermediate status
        
            if (( n_workers == 1 ))
            then
                logfile_arr[0]="${logname_1core}"
                get_worker_status ${$} "${logname_1core}" 0 &
            else
            
                for (( i=0; i<n_workers; ++i ))
                do
                    logfile_arr[${i}]="${base_logpath}/worker_${i}/${logname_mcore}"
                    get_worker_status ${$} "${base_logpath}/worker_${i}/${logname_mcore}" ${i} &
                done
                
            fi
            
            w_status_started="1"
        fi
        
        # clear runtimes array
        rntme_arr=()
        
        for (( i=0; i<n_workers; ++i ))
        do
            # get all events that are already finished
            evlist_per_worker="$(grep "^.*ISFG4SimSvc.*INFO.*Event nr.*took.*New average" ${logfile_arr[${i}]})"

            if [[ "${evlist_per_worker}" ]]
            then
                # get the last event that has finished
                w_msg_arr[${i}]="$(sed -e "0,/^.*Event.*took[^0-9]*[0-9]\+/ s/^.*\(Event.*took[^0-9]*[0-9]\+\).*/\1 s/p" -n <(tac <<< "${evlist_per_worker}"))"
                    
                # collect runtimes from the logs so they can later be used to estimate time left
                rntme_arr=("${rntme_arr[@]}" $(xargs -n 1 -I {} sh -c "echo {} |sed 's/^.*Event.*took[^0-9]*\([0-9]\+\).*/\1/'" <<< "${evlist_per_worker}"))
            fi
                
        done
        
        # if at least 1 event has finished
        if (( ${#rntme_arr[@]} > 0 ))
        then
            # don't do this outside "if" as it would overwrite "N/A"
            n_finished_events="${#rntme_arr[@]}"
            
            # min and max runtimes
            rntme_min="${rntme_arr[0]}"
            rntme_max="${rntme_arr[0]}"
            
            for rt in "${rntme_arr[@]}"
            do
                (( rt < rntme_min )) && rntme_min="${rt}"
                (( rt > rntme_max )) && rntme_max="${rt}"
            done
            
            rntme_min_max="${rntme_min} / ${rntme_max} s"

            # runtimes: global arithmetic mean
            rntme_arth_mean="$(awk '{ sum=0; for (i=1; i<=NF; i++) { sum+=$i } printf "%f", sum/NF }' <<< "${rntme_arr[@]}")"
        
            # runtimes: global standard deviation
            # place ${rntme_arr[@]} as last parameter as it has variable length
            rntme_sd="$(awk '{ ssq=0; for (i=3; i<=NF; i++) { ssq+=($i-$1)**2 } printf "%f", sqrt(ssq)/$2 }' <<< "${rntme_arth_mean} ${n_finished_events} ${rntme_arr[@]}")"

            # multiply with 3 to cover 99.73% (6 sigma) instead of 68.27% (2 sigma) of all runtime values.
            # see definition of "normal distribution"
            # round to integer value
            rntme_sd_six_sigma="$(awk '{ printf "%.0f", 3*$1 }' <<< "${rntme_sd}")"

            # round to integer value
            # avoid surprises due to language setting
            rntme_arth_mean="$(LC_NUMERIC="en_US.UTF-8"; printf "%.0f\n" "${rntme_arth_mean}")"
        
            if (( n_finished_events_last == n_finished_events ))
            then
                (( time_left_reduction += 60 ))
            else
                time_left_reduction="0"
                n_finished_events_last="${n_finished_events}"
            fi
                
            n_events_left="$(( n_events - n_finished_events ))"
            time_left_s="0"
            (( n_events_left > 0 )) && time_left_s="$(( n_events_left * rntme_arth_mean / n_workers - time_left_reduction ))"

            if (( time_left_s < 0 ))
            then
                 msg_overtime="overtime"
                 time_left_s="$(( -time_left_s ))"
            else
                 msg_overtime=""
            fi
            
            # format rntme_arth_mean
            rntme_arth_mean="$(printf "%s s\n" "${rntme_arth_mean}")"
            
            time_left="$(format_timestring "${time_left_s}")"
                
            # estimate "uncertainty"
            time_left_uncert_s="$(( n_events_left * rntme_sd_six_sigma / n_workers ))"
            time_left_uncert="$(format_timestring "${time_left_uncert_s}")"
        fi
            
    fi
    
    # at start or restart the main loop needs a few laps to get the setup done
    if (( init_loop_counter < 3 ))
    then
        (( init_loop_counter ++ ))
        update_display_on_tty starting
        sleep 2
    else
        update_display_on_tty
        
        # regular display update every 60 s
        # avoid too much drifting on heavily loaded systems
        sleep $(( next_loopstart - $(date +%s) )) 2>/dev/null
    fi

done
