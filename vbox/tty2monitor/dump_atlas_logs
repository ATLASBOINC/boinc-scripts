#!/bin/bash

# ATLAS logs don't grant read access to other accounts but atlas
# Hence we need to dump the logs to a location where the monitoring user can read them

source_location="/home/atlas/RunAtlas"
target_location="/home/montty2/RunAtlas"
main_log_name="log.EVNTtoHITS"
athena_log_name="AthenaMP.log"
athena_workers_dir="athenaMP-workers-EVNTtoHITS-sim"

# use "install -d" instead of mkdir, chown, chmod
install -d -o montty2 -g montty2 -m 777 ${target_location}


# trigger 1: until main log exists
while :
do
    main_log="$(find -L ${source_location} -name "${main_log_name}")"
    [[ "${main_log}" != "" ]] && break

    # check all 10 s (we are not in a hurry)
    sleep 10
done

# tail complete file starting at line 1
tail -f -n +1 ${main_log} >${target_location}/${main_log_name} 2>/dev/null &


# check if ATLAS is running singlecore or multicore

# wait until maxEvents appears in main_log
grep -E -m 1 -s "^.*maxEvents =[^0-9]*[0-9]+" <(tail -F -n +1 --pid ${$} ${main_log} 2>/dev/null) 2>/dev/null

# it's a multicore if ATHENA_PROC_NUMBER is in the log before maxEvents
# it's a singlecore if ATHENA_PROC_NUMBER is missing
pattrn="^.*ATHENA_PROC_NUMBER set to[^0-9]*"
n_workers="$(sed -e "0,/${pattrn}/ s/${pattrn}\([0-9]\+\).*/\1/p" -n ${main_log})"
[[ ! "${n_workers}" ]] && n_workers="1"
    
# singlecore logs to main_log
# a tail for main_log is already running
# now start the tails for multicore
if (( n_workers > 1 ))
then

    for (( i=0; i<n_workers; ++i ))
    do
        mkdir -p ${target_location}/worker_${i}
        tail -F -n +1 $(dirname ${main_log})/${athena_workers_dir}/worker_${i}/${athena_log_name} >${target_location}/worker_${i}/${athena_log_name} 2>/dev/null &
    done
    
fi
